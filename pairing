using GAT.WEB.Biz.Process;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using GAT.Biz;
using BoiteOutils;
using System.IO;
using System.Collections;
using BoiteOutilsWEB;
using System.Net;

namespace Parametragetest
{
    public partial class Parametragetest : PageGAT
    {
        public Parametragetest()
        {

        }

        protected void Page_Load(object sender, EventArgs e)
        {
            test();
        }

        public class player
        {
            public bool actif;
            public int number;
            public List<int> notes = new List<int>();
        }
        public class node
        {
            public int finalPoids;
            public bool isResultC1;
            public int poidsC1;
            public int poidsC2;
            public player p1;
            public player clic1;
            public bool team1;
            public player clic2;
            public List<node> nodesC1 = new List<node>();
            public List<node> nodesC2 = new List<node>();
        }

        public void test()
        {
            List<player> t1 = new List<player>();
            List<player> t2 = new List<player>();

            t1.Add(new player { actif = true, number = 0, notes = new List<int> { 5, 3, 2, 1, 4 } });
            t1.Add(new player { actif = true, number = 1, notes = new List<int> { 2, 3, 1, 2, 5 } });
            t1.Add(new player { actif = true, number = 2, notes = new List<int> { 5, 4, 1, 3, 5 } });
            t1.Add(new player { actif = true, number = 3, notes = new List<int> { 1, 2, 4, 3, 5 } });
            t1.Add(new player { actif = true, number = 4, notes = new List<int> { 5, 2, 1, 3, 4 } });
            t2.Add(new player { actif = true, number = 0, notes = new List<int> { 5, 2, 5, 1, 5 } });
            t2.Add(new player { actif = true, number = 1, notes = new List<int> { 3, 3, 4, 2, 2 } });
            t2.Add(new player { actif = true, number = 2, notes = new List<int> { 2, 1, 1, 4, 1 } });
            t2.Add(new player { actif = true, number = 3, notes = new List<int> { 1, 2, 3, 3, 3 } });
            t2.Add(new player { actif = true, number = 4, notes = new List<int> { 4, 5, 5, 5, 4 } });
            var result = new List<node>();
            var poids = calculate(t1, t2, null, result, true);
            int final = drop(result);

            finalPath(result);
            TreeView1.Nodes.Add(new TreeNode("pair"));
            createTree(result, TreeView1.Nodes[0].ChildNodes, t1, t2);
        }

        public void createTree(List<node> result, TreeNodeCollection treenodes, List<player> t1, List<player> t2)
        {
            foreach (var node in result)
            {
                var newnode = new TreeNode(getTreeString(node, t1, t2));
                newnode.Expanded = false;
                createTree(node.nodesC1, newnode.ChildNodes, t1, t2);
                createTree(node.nodesC2, newnode.ChildNodes, t1, t2);
                treenodes.Add(newnode);
            }
        }

        public string getTreeString(node node, List<player> t1, List<player> t2)
        {
            string res = "";

            List<player> table = node.team1 ? t1 : t2;
            res += (node.p1.number + 1);
            res = res + " - " + (node.clic1.number + 1) + "(" + table[node.p1.number].notes[node.clic1.number] + "|" + node.poidsC1 + ")/" + (node.clic2.number + 1) + "(" + table[node.p1.number].notes[node.clic2.number] + "|" + node.poidsC2 + ")";
            res = res + " | " + node.finalPoids;
            return res;
        }

        public int calculate(List<player> t1, List<player> t2, player drop, List<node> result, bool team1)
        {
            int poids = 0;
            foreach (player player in t1.Where(a => a.actif))
            {
                var p = player;
                if (drop != null)
                    p = drop;
                List<List<int>> clic = getCouples(t2);
                if (clic.Count == 0 && t2.Count == 1)
                {
                    var node = new node { team1 = team1, poidsC1 = p.notes[t2[0].number], poidsC2 = p.notes[t2[0].number], p1 = p, clic1 = t2[0], clic2 = t2[0], nodesC1 = new List<node>(), nodesC2 = new List<node>() };
                    result.Add(node);
                    poids += p.notes[t2[0].number];
                }
                foreach (var doublon in clic)
                {
                    var clic1 = getPlayer(t2, doublon[0]);
                    var clic2 = getPlayer(t2, doublon[1]);
                    var childs1 = new List<node>();
                    var childPoids1 = calculate(t2.Where(a => a != clic1).ToList<player>(), t1.Where(a => a != p).ToList<player>(), clic2, childs1, !team1);
                    var childs2 = new List<node>();
                    var childPoids2 = calculate(t2.Where(a => a != clic2).ToList<player>(), t1.Where(a => a != p).ToList<player>(), clic1, childs2, !team1);
                    var node = new node {team1 = team1, poidsC1 = p.notes[clic1.number] + childPoids1, poidsC2 = p.notes[clic2.number] + childPoids2, p1 = p, clic1 = clic1, clic2 = clic2, nodesC1 = childs1, nodesC2 = childs2 };
                    result.Add(node);
                    poids += childPoids1 + childPoids2 + p.notes[clic1.number] + p.notes[clic2.number];
                }
                if (drop != null)
                    break;
            }
            return poids;
        }

        public class result
        {
            public int position;
            public bool player1;
        }

        public int drop(List<node> pairing)
        {
            int position = 0;
            List<int> notes = new List<int> { 0, 0, 0, 0, 0 };
            foreach (var node in pairing)
            {
                notes[node.p1.number] += node.poidsC1 + node.poidsC2;
            }
            int min = notes[0];
            int count = 0;
            foreach (var note in notes)
            {
                if (note < min)
                {
                    position = count;
                    min = note;
                }
                    count++;
            }
            return position;
        }

        public int finalPath(List<node> pairing) 
        {
            int min = 0;
            int max = 0;
            bool isTeam1 = true;
            foreach (var node in pairing)
            {
                isTeam1 = node.team1;
                var poidstmp = 0;
                var poidsC1 = finalPath(node.nodesC1) + node.p1.notes[node.clic1.number];
                var poidsC2 = finalPath(node.nodesC2) + node.p1.notes[node.clic2.number];
                if (isTeam1)
                {
                    poidstmp = Math.Min(poidsC1, poidsC2);
                    node.isResultC1 = Math.Min(poidsC1, poidsC2) == poidsC1;
                    if (min == 0)
                        min = poidstmp;
                    else
                        min = Math.Max(poidstmp, min);
                }
                else
                {
                    poidstmp = Math.Max(poidsC1, poidsC2);
                    node.isResultC1 = Math.Max(poidsC1, poidsC2) == poidsC1;
                    if (max == 0)
                        max = poidstmp;
                    else
                        max = Math.Min(poidstmp, max);
                }
                node.poidsC1 = poidsC1;
                node.poidsC2 = poidsC2;
                node.finalPoids = poidstmp;
            }
            return isTeam1 ? min : max;
        }

        public player getPlayer(List<player> t, int number)
        {
            foreach (player p in t)
            {
                if (p.number == number)
                    return p;
            }
            return null;
        }

        public List<List<int>> getCouples(List<player> t)
        {
            List<List<int>> res = new List<List<int>>();
            foreach (player p in t.Where(a => a.actif))
            {
                foreach (player c in t.Where(a => a.actif))
                {
                    if (p.number != c.number)
                    {
                        List<int> tmp = new List<int> { p.number, c.number };
                        bool doublon = false;
                        foreach (var tmp2 in res)
                        {
                            if ((tmp2[0] == tmp[0] && tmp2[1] == tmp[1]) || (tmp2[1] == tmp[0] && tmp2[0] == tmp[1]))
                            {
                                doublon = true;
                                break;
                            }
                        }
                        if (!doublon)
                            res.Add(tmp);
                    }
                }
            }
            return res;
        }

    }

}
